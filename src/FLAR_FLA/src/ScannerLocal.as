package {//	import stuff	import flash.events.Event;	import org.papervision3d.lights.PointLight3D;	import org.papervision3d.materials.utils.MaterialsList;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.Cube;		import com.squidder.flar.FLARMarkerObj;	import com.squidder.flar.PVFLARBaseApplication;	import com.squidder.flar.events.FLARDetectorEvent;		import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.events.AsyncErrorEvent;	import flash.events.NetStatusEvent; 	import org.papervision3d.materials.WireframeMaterial;	import org.papervision3d.materials.VideoStreamMaterial;		public class ScannerLocal extends PVFLARBaseApplication{		// variables that work throughout the code		private var _cubes : Array;		private var _lightPoint : PointLight3D;		protected var quality:uint = 16;		protected var cube:Cube;		protected var video_cube:Cube;				protected var videoMat:VideoStreamMaterial;		private var netConnection:NetConnection;		private var video:Video;		private var netStream:NetStream;		private var netStreamAddress:String;		private var netConnectionAddress:String;		private var dispObj : DisplayObject3D = new DisplayObject3D();		public function ScannerLocal() {						_cubes = new Array();					// import the marker pattern			_markers = new Array();			_markers.push( new FLARMarkerObj( "assets/flar/RedMaplePat.pat" , 16 , 50 , 80 ) );			_markers.push( new FLARMarkerObj( "assets/flar/SugarMaplePat.pat" , 16 , 50 , 80 ) );			_markers.push( new FLARMarkerObj( "assets/flar/paperMach.pat" , 16 , 50 , 80 ) );			_markers.push( new FLARMarkerObj( "assets/flar/history.pat" , 16 , 50 , 80 ) );			_markers.push( new FLARMarkerObj( "assets/flar/info.pat" , 16 , 50 , 80 ) );						super( );		}				override protected function _init( event : Event ) : void {			super._init( event );							_lightPoint = new PointLight3D( );			_lightPoint.y = 1000;			_lightPoint.z = -1000;					}		//detecting the marker		override protected function _detectMarkers() : void {						_resultsArray = _flarDetector.updateMarkerPosition( _flarRaster , 80 , .5 );						for ( var i : int = 0 ; i < _resultsArray.length ; i ++ ) {								var subResults : Array = _resultsArray[ i ];								for ( var j : * in subResults ) {										_flarDetector.getTransmationMatrix( subResults[ j ], _resultMat );					if ( _cubes[ i ][ j ] != null ) transformMatrix( _cubes[ i ][ j ] , _resultMat );				}							}									}						override protected function _handleMarkerAdded( event : FLARDetectorEvent ) : void {						_addCube( event.codeId , event.codeIndex );					}		override protected function _handleMarkerRemove( event : FLARDetectorEvent ) : void {				_removeCube( event.codeId , event.codeIndex );			}				//adding your objects				private function _addCube( id:int , index:int ) : void {					if ( _cubes[ id ] == null ) _cubes[ id ] = new Array();						if ( _cubes[ id ][ index ] == null ) {				//material set up				switch(id){					case 0:						netConnectionAddress = null;						netStreamAddress = "assets/flar/RedMaple.flv";						break;					case 1:						netConnectionAddress = null;						netStreamAddress = "assets/flar/SugarMaple.flv";						break;					case 2:						netConnectionAddress = null;						netStreamAddress = "assets/flar/PaperMachine.flv";						break;					case 3:						netConnectionAddress = null;						netStreamAddress = "assets/flar/History.flv";						break;					case 4:						netConnectionAddress = null;						netStreamAddress = "assets/flar/InfoDesk.flv";						//VVV What it should look like if it would run through the FMS VVV						//netConnectionAddress = "rtmpe://cissrv0.uwsp.edu/WDMD302Justin";						//netStreamAddress  = "InfoDesk.flv";						break;				}								netConnection = new NetConnection();				netConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatus);				netConnection.connect(netConnectionAddress);							_cubes[ id ][ index ] = dispObj;			} 							_baseNode.addChild( _cubes[ id ][ index ] );					}				private function netStatus(event:NetStatusEvent):void {			trace("netStatus: " + event);			var info:Object = event.info;			trace(info.code);						netStream = new NetStream(netConnection);			netStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			netStream.play(netStreamAddress); 			video = new Video();			video.smoothing = true;			video.attachNetStream(netStream); 			//Create Materials			videoMat = new VideoStreamMaterial(video, netStream, true, false);					//Create objects			video_cube = new Cube(new MaterialsList( { front: videoMat } ), 512, 1, 288, quality, quality, quality, 0);					//Position elements			video_cube.x = -40;			video_cube.z += 30;			video_cube.y = -30;			dispObj.z =15;								//Add objects to my container			dispObj.addChild(video_cube);						//Add to base			_baseNode.addChild(dispObj);					}				function asyncErrorHandler(event:AsyncErrorEvent):void {		    trace(event.text);		}				//The remove cube function. Gets activated once a marker is removed		private function _removeCube( id:int , index:int ) : void {						if ( _cubes[ id ] == null ) _cubes[ id ] = new Array();			if ( _cubes[ id ][ index ] != null ) {								_baseNode.removeChild( _cubes[ id ][ index ] );							}		}			}}